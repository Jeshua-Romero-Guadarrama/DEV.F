/* ============================================================================
 *  Gesti√≥n de Lista de Compras
 *  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
 *  Arreglo para almacenar los productos y exponer tres operaciones b√°sicas:
 *     1. agregarProducto  ‚ûú A√±ade un producto (sin duplicados)
 *     2. eliminarProducto ‚ûú Elimina un producto existente
 *     3. mostrarLista     ‚ûú Imprime la lista completa en consola
 *  Uso de ECMAScript 2020+ (arrow functions, const / let, m√©todos de Array).
 * ============================================================================ */

/**
 * Arreglo que almacena los productos de la lista de compras.
 * Se declara como const para impedir la reasignaci√≥n, pero su contenido puede modificarse (push, splice, etc.).
 * @type {string[]}
 */
const listaDeCompras = [];

/* ---------------------------------------------------------------------------
 * Funci√≥n: agregarProducto
 * ---------------------------------------------------------------------------
 * @param  {string} producto - Nombre del producto a a√±adir.
 * @return {void}
 * A√±ade el producto al final del arreglo s√≥lo si:
 *   1) Se recibe una cadena no vac√≠a.
 *   2) A√∫n no existe (se evita duplicar entradas, ignorando may√∫sculas/min√∫sculas).
 * Tambi√©n muestra en consola el resultado de la operaci√≥n.
 */
const agregarProducto = (producto) => {
  // Validaci√≥n b√°sica de la entrada
  if (typeof producto !== 'string' || producto.trim() === '') {
    console.warn('‚ö†Ô∏è  Debes proporcionar un nombre de producto no vac√≠o.');
    return;
  }

  // Normalizamos la cadena para comparaci√≥n (trim + min√∫sculas)
  const clave = producto.trim().toLowerCase();

  // Comprobamos si ya existe un producto con la misma clave
  const duplicado = listaDeCompras.some(
    (item) => item.trim().toLowerCase() === clave
  );

  if (duplicado) {
    console.info(`‚ÑπÔ∏è  "${producto}" ya est√° en la lista; no se a√±adi√≥ de nuevo.`);
    return;
  }

  // Si no es duplicado, lo agregamos
  listaDeCompras.push(producto.trim());
  console.info(`‚úÖ  "${producto}" se a√±adi√≥ correctamente a la lista.`);
};

/* ---------------------------------------------------------------------------
 * Funci√≥n: eliminarProducto
 * ---------------------------------------------------------------------------
 * @param  {string} producto - Nombre del producto a eliminar.
 * @return {void}
 * Elimina la primera coincidencia del arreglo (ignorando may√∫sculas/min√∫sculas).
 * Si el producto no existe, muestra un aviso en consola.
 */
const eliminarProducto = (producto) => {
  if (typeof producto !== 'string' || producto.trim() === '') {
    console.warn('‚ö†Ô∏è  Debes proporcionar un nombre de producto no vac√≠o.');
    return;
  }

  const clave = producto.trim().toLowerCase();

  // Obtenemos el √≠ndice del primer elemento que coincida
  const indice = listaDeCompras.findIndex(
    (item) => item.trim().toLowerCase() === clave
  );

  if (indice === -1) {
    console.info(`‚ÑπÔ∏è  "${producto}" no se encontr√≥ en la lista.`);
    return;
  }

  // Eliminamos el elemento encontrado
  const [eliminado] = listaDeCompras.splice(indice, 1);
  console.info(`üóëÔ∏è  "${eliminado}" se elimin√≥ correctamente de la lista.`);
};

/* ---------------------------------------------------------------------------
 * Funci√≥n: mostrarLista
 * ---------------------------------------------------------------------------
 * @return {void}
 * Imprime la lista de compras en la consola, mostrando cada elemento con un √≠ndice legible. 
 * Si la lista est√° vac√≠a, lo indica al usuario.
 */
const mostrarLista = () => {
  console.log('üõí  Lista de Compras:');
  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');

  if (listaDeCompras.length === 0) {
    console.log('   (vac√≠a)\n');
    return;
  }

  // Recorremos la lista y mostramos cada producto
  listaDeCompras.forEach((item, idx) => {
    console.log(`${idx + 1}. ${item}`);
  });
  console.log(); // L√≠nea en blanco al final
};

/* ============================================================================
 * Ejemplo de uso
 * ============================================================================ */

// node
// .load proyecto_estructuras_datos.js
// agregarProducto('Leche');
// agregarProducto('Pan');
// agregarProducto('Huevos');
// agregarProducto('pan');      // ‚Üê duplicado (no se a√±ade)
// mostrarLista();
// eliminarProducto('LECHE');   // ‚Üê may√∫sculas / min√∫sculas no importan
// mostrarLista();